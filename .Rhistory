optimum_weights = optim(initial_values_p,
opt_sharpe_ratio_p,
stock_returns = log_returns,
rfr = RFR,
method = 'L-BFGS-B',
lower = lower_b_p,
upper = upper_b_p)
sum(optimum_weights$par)
# ITS WORKING !!! ####
opt_sharpe_ratio_p = function(par, stock_returns, rfr) {
print(par)
portfolio_return = mean(stock_returns %*% par) * 250
# print(portfolio_return)
portfolio_std = as.numeric((t(par) %*% cov(stock_returns) %*% par)^0.5) * sqrt(250)
# print(portfolio_std)
sharp_r = (portfolio_return - rfr) / portfolio_std
print(sharp_r)
one_check = sum(par)
if(one_check != 1) {
penalty = 10000 * (1 - one_check)^2
} else {
penalty = 0
}
return(-(sharp_r - penalty))
}
optimum_weights = optim(initial_values_p,
opt_sharpe_ratio_p,
stock_returns = log_returns,
rfr = RFR,
method = 'L-BFGS-B',
lower = lower_b_p,
upper = upper_b_p)
sum(optimum_weights$par)
initial_values_p = c(rep(1/stock_n,stock_n))
lower_b_p = c(0.05, 0.1, 0, 0, 0)
upper_b_p = c(1, 1, 1, 1, 1)
# ITS WORKING !!! ####
opt_sharpe_ratio_p = function(par, stock_returns, rfr) {
print(par)
portfolio_return = mean(stock_returns %*% par) * 250
# print(portfolio_return)
portfolio_std = as.numeric((t(par) %*% cov(stock_returns) %*% par)^0.5) * sqrt(250)
# print(portfolio_std)
sharp_r = (portfolio_return - rfr) / portfolio_std
print(sharp_r)
one_check = sum(par)
if(one_check != 1) {
penalty = 10000 * (1 - one_check)^2
} else {
penalty = 0
}
return(-(sharp_r - penalty))
}
optimum_weights = optim(initial_values_p,
opt_sharpe_ratio_p,
stock_returns = log_returns,
rfr = RFR,
method = 'L-BFGS-B',
lower = lower_b_p,
upper = upper_b_p)
optimum_weights = optim(initial_values_p,
opt_sharpe_ratio_p,
stock_returns = log_returns,
rfr = RFR,
method = 'L-BFGS-B',
lower = lower_b_p,
upper = upper_b_p)
sum(optimum_weights$par)
read.csv('dax_etf.csv')
read.csv('dax_etf.csv')
dax_etf_prices = read.csv('dax_etf.csv', )
head(dax_etf_prices)
dax_etf_prices$Date = ymd_hms(dax_etf_prices$Date)
head(dax_etf_prices)
dax_etf_prices$Date = date(ymd_hms(dax_etf_prices$Date))
head(dax_etf_prices)
dax_etf_prices = dax_etf_prices %>%
select(Date, Close``)
dax_etf_prices = dax_etf_prices %>%
select(Date, Close)
head(dax_etf_prices)
dax_etf_prices$Close = diff(log(dax_etf_prices$Close))
dax_eft_log_ret = dax_etf_prices[-1,]
dax_etf_prices$Close = diff(log(dax_etf_prices$Close))
head(dax_etf_prices)
dax_etf_prices = read.csv('dax_etf.csv', )
head(dax_etf_prices)
dax_etf_prices$Date = date(ymd_hms(dax_etf_prices$Date))
dax_etf_prices = dax_etf_prices %>%
select(Date, Close)
head(dax_etf_prices)
dax_eft_log_ret = dax_etf_prices[-1,]
dax_etf_log_ret$Close = diff(log(dax_etf_prices$Close))
dax_eft_log_ret = dax_etf_prices[-1,]
dax_eff_log_ret = dax_etf_prices[-1,]
dax_etf_log_ret$Close = diff(log(dax_etf_prices$Close))
dax_etf_log_ret = dax_etf_prices[-1,]
dax_etf_log_ret = dax_etf_prices[-1,]
dax_etf_log_ret$Close = diff(log(dax_etf_prices$Close))
head(dax_etf_log_ret)
head(dax_etf_prices)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(nlme)
library(tibble)
library(purrr)
library(splines)
library(lubridate)
# Set up current portfolio meta information ####
tickers = c('BMW', 'EUNL', 'EXS1', 'SXRI', 'MBG', 'SXR8')
file_names = sp_folder = list.files(paste0(getwd(), '/security_prices'))
allocation = c(8.4, 3.5, 9.8, 4.9, 11.5, 6.6)
current_portfolio = data.frame(security = tickers, account = allocation, file_name = file_names)
current_portfolio = current_portfolio %>%
mutate(weight = account / sum(account))
current_portfolio
sum(current_portfolio$weight)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path) %>%
select(-3, -4, -5, -6, -7)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%d.%m.%Y")
hist_price[,2] = as.numeric(lapply(hist_price[,2], gsub, pattern = ',', replacement = '.'))
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
head(daily_log_returns)
for(f_name in current_portfolio$file_name) {
log_ret = price_to_log_returns('security_prices', f_name)
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
mat_daily_log_returns = as.matrix(daily_log_returns[seq(2,ncol(daily_log_returns))])
head(mat_daily_log_returns)
current_portfolio
# Calculate portfolio mean and standard deviation ####
port_log_ret = mat_daily_log_returns %*% current_portfolio$weight
head(port_log_ret)
head(tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret))
portfolio_log_returns = tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret)
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
head(combined_port_bench)
combined_port_bench = na.omit(combined_port_bench)
head(combined_port_bench)
colnames(combined_port_bench) = c('Portfolio', 'DAX')
head(combined_port_bench)
colnames(combined_port_bench) = c('Date', 'Portfolio', 'DAX')
head(combined_port_bench)
colnames(combined_port_bench) = c('Date', 'Portfolio', 'DAX')
head(combined_port_bench)
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
combined_port_bench = na.omit(combined_port_bench)
colnames(combined_port_bench) = c('Date', 'Portfolio', 'DAX')
head(combined_port_bench)
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
combined_port_bench = na.omit(combined_port_bench)
colnames(combined_port_bench) = c('Date', 'Port', 'DAX')
head(combined_port_bench)
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
head(combined_port_bench)
head(portfolio_log_returns)
head(tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret))
portfolio_log_returns = tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret)
colnames(portfolio_log_returns) = c('Date', 'Portfolio')
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
head(combined_port_bench)
head(portfolio_log_returns)
head(tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret))
# Get Benchmark Data ####
head(port_log_ret)
head(tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret[,1]))
portfolio_log_returns = tibble(Date = daily_log_returns$Date, LogReturns = port_log_ret[,1])
colnames(portfolio_log_returns) = c('Date', 'Portfolio')
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
head(combined_port_bench)
combined_port_bench = na.omit(combined_port_bench)
dax_etf_prices$Date = date(ymd_hms(dax_etf_prices$Date))
dax_etf_prices = dax_etf_prices %>%
select(Date, Close)
dax_etf_prices$Date = date(ymd_hms(dax_etf_prices$Date))
dax_etf_prices = dax_etf_prices %>%
select(Date, Close)
head(dax_etf_prices)
dax_etf_prices = read.csv('dax_etf.csv', )
dax_etf_prices = read.csv('dax_etf.csv')
head(dax_etf_prices)
head(dax_etf_prices)
dax_etf_prices$Date = date(ymd_hms(dax_etf_prices$Date))
dax_etf_prices = dax_etf_prices %>%
select(Date, Close)
head(dax_etf_prices)
dax_etf_log_ret = dax_etf_prices[-1,]
dax_etf_log_ret$Close = diff(log(dax_etf_prices$Close))
colname(dax_etf_log_ret) = c('Date', 'DAX')
colnames(dax_etf_log_ret) = c('Date', 'DAX')
head(dax_etf_log_ret)
head(portfolio_log_returns)
combined_port_bench = left_join(portfolio_log_returns, dax_etf_log_ret, by='Date')
head(combined_port_bench)
combined_port_bench = na.omit(combined_port_bench)
head(combined_port_bench)
long_combined_port_bench = combined_port_bench %>%
pivot_longer(
cols = c(2,3),
names_to = 'Portfolios',
values_to = 'Returns'
)
head(long_combined_port_bench)
ggplot(long_combined_port_bench, aes(x=Date, y=exp(cumsum(Returns))), color='Portfolios') +
geom_line(linewidth=1) +
labs(y='Log Returns',
x='Date',
color='Portfolios')
ggplot(long_combined_port_bench, aes(x=Date, y=exp(cumsum(Returns))), color=Portfolios) +
geom_line(linewidth=1) +
labs(y='Log Returns',
x='Date',
color='Portfolios')
ggplot(long_combined_port_bench, aes(x=Date, y=exp(cumsum(Returns)), color=Portfolios)) +
geom_line(linewidth=1) +
labs(y='Log Returns',
x='Date',
color='Portfolios')
cov(combined_port_bench[c(2,3)])
cor(combined_port_bench[c(2,3)])
head(combined_port_bench[c(2,3)])
head(long_combined_port_bench[long_combined_port_bench$Date > '2025-01-01'])
head(long_combined_port_bench[[long_combined_port_bench$Date > '2025-01-01']])
head(long_combined_port_bench[,long_combined_port_bench$Date > '2025-01-01'])
long_combined_port_bench$Date >= '2025-01-01']
long_combined_port_bench$Date >= '2025-01-01'
plot_port_bench = long_combined_port_bench %>%
filter(Date >= '2025-01-01')
ggplot(plot_port_bench, aes(x=Date, y=exp(cumsum(Returns)), color=Portfolios)) +
geom_line(linewidth=1) +
labs(y='Log Returns',
x='Date',
color='Portfolios')
ggplot(plot_port_bench, aes(x=Date, y=50*exp(cumsum(Returns)), color=Portfolios)) +
geom_line(linewidth=1) +
labs(y='Log Returns',
x='Date',
color='Portfolios')
cor(combined_port_bench[2], combined_port_bench[2])
cor(combined_port_bench[2], combined_port_bench[3])
cor(combined_port_bench[2], combined_port_bench[2])
cor(combined_port_bench[c(2,3)])
?as.timeseries
?as.timeSeries
library(timeSeries)
# Using fPortfolio ####
install.packages('fPortfolio')
library(fPortfolio)
library(fPortfolio)
# Example usage
data <- matrix(rnorm(100), ncol = 5)  # Create example data
# Example usage
data <- matrix(rnorm(100), ncol = 5)  # Create example data
# Example usage
data <- matrix(rnorm(100), ncol = 5)  # Create example data
time_series_data <- as.timeSeries(data)  # Convert to timeSeries object
head(time_series_data)
# Portfolio specifications
spec <- portfolioSpec()
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
# Plot the efficient frontier
plot(frontier)
time_series_data <- as.timeSeries(data)  # Convert to timeSeries object
head(time_series_data)
summary(frontier)
getWeights(frontier)
getPoints(frontier)
getData(frontier)
getNFrontierPoints.fPORTFOLIO(frontier)
getStatistics(frontier)
frontier
frontier@portfolio
frontier@portfolio$targetReturn
frontier@portfolio
frontier@portfolio$targetReturn
frontier@portfolio['targetReturn']
frontier@portfolio[1]
getTargetReturn(frontier)
targ_ret = getTargetReturn(frontier)
getTargetRisk(frontier)
targ_risk = getTargetRisk(frontier)
plot(targ_risk[2], targ_ret[1])
plot(targ_risk[,2], targ_ret[,1])
plot(targ_risk[,2], targ_ret[,1], type='l')
# Plot the efficient frontier
plot(frontier)
# Plot the efficient frontier
plot(frontier, c(1,2,3,4))
# Plot the efficient frontier
plot(frontier, c(1,2,3,4), type='l')
# Plot the efficient frontier
plot(frontier, c(1,2,3,4), type='l')
# Plot the efficient frontier
plot(frontier, c(1,2,3,4))
# Using fPortfolio ####
# install.packages('fPortfolio')
# install.packages("timeSeries")  # Install the package
library(fPortfolio)
library(timeSeries)             # Load the package
# Example usage
data <- matrix(rnorm(100), ncol = 5)  # Create example data
time_series_data <- as.timeSeries(data)  # Convert to timeSeries object
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
# Plot the efficient frontier
plot(frontier, c(1,2,3,4))
# Set up current portfolio meta information ####
tickers = c('BMW', 'EUNL', 'EXS1', 'SXRI', 'MBG', 'SXR8')
file_names = sp_folder = list.files(paste0(getwd(), '/security_prices'))
allocation = c(8.4, 3.5, 9.8, 4.9, 11.5, 6.6)
current_portfolio = data.frame(security = tickers, account = allocation, file_name = file_names)
current_portfolio = current_portfolio %>%
mutate(weight = account / sum(account))
current_portfolio
sum(current_portfolio$weight)
getwd()
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path) %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%d.%m.%Y")
hist_price[,2] = as.numeric(lapply(hist_price[,2], gsub, pattern = ',', replacement = '.'))
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(nlme)
library(tibble)
library(purrr)
library(splines)
library(lubridate)
library(mvtnorm)
# fPortfolio requirements
library(fPortfolio)
library(timeSeries)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path) %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%d.%m.%Y")
hist_price[,2] = as.numeric(lapply(hist_price[,2], gsub, pattern = ',', replacement = '.'))
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
head(daily_log_returns)
for(f_name in current_portfolio$file_name) {
log_ret = price_to_log_returns('security_prices', f_name)
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
# Security log returns
time_series_data <- as.timeSeries(daily_log_returns)  # Convert to timeSeries object
head(time_series_data)
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
daily_log_returns = na.omit(daily_log_returns) * 100
head(daily_log_returns)
# Security log returns
time_series_data <- as.timeSeries(daily_log_returns)  # Convert to timeSeries object
head(time_series_data)
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
setRiskFreeRate(spec) <- 0.1  # Set risk-free rate
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
head(time_series_data)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path) %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%d.%m.%Y")
hist_price[,2] = as.numeric(lapply(hist_price[,2], gsub, pattern = ',', replacement = '.'))
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
head(daily_log_returns)
for(f_name in current_portfolio$file_name) {
log_ret = price_to_log_returns('security_prices', f_name)
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
daily_log_returns = na.omit(daily_log_returns) * 100
head(daily_log_returns)
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
head(daily_log_returns)
for(f_name in current_portfolio$file_name) {
log_ret = price_to_log_returns('security_prices', f_name)
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
head(time_series_data)
procentage_daily_returns = time_series_data * 100
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
getWeights(frontier)
# Example usage
data <- matrix(rnorm(100), ncol = 5)  # Create example data
time_series_data <- as.timeSeries(data)  # Convert to timeSeries object
head(time_series_data)
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
getWeights(frontier)
head(procentage_daily_returns)
# Portfolio specifications
spec <- portfolioSpec()
setRiskFreeRate(spec) <- 0.01  # Set risk-free rate
# Constraints
constraints <- "LongOnly"
# Calculate efficient frontier
frontier <- portfolioFrontier(time_series_data, spec, constraints)
plot(frontier, c(1,2,3,4))
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path) %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%d.%m.%Y")
hist_price[,2] = as.numeric(lapply(hist_price[,2], gsub, pattern = ',', replacement = '.'))
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2017-01-01'), ymd('2026-01-01'), by='day'))
tickers = c('BMW', 'EUNL', 'EXS1', 'SXRI', 'MBG', 'SXR8')
file_names = sp_folder = list.files(paste0(getwd(), '/security_prices'))
tickers = c('BMW', 'EUNL', 'EXS1', 'SXRI', 'MBG', 'SXR8')
tickers = c('BMW', 'EUNL', 'EXS1', 'SXRI', 'MBG', 'SXR8')
