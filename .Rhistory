N = 100
delta_t = 1/N
S0 = 1
S1[1] = S0
S1 = vector('numeric')
for (i in 2:(N-1)) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S1[1] = S0
S1 = vector('numeric')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
# Geometric brownian motion delta 1 ####
S0 = 1
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
# Geometric brownian motion delta 1 ####
S0 = 5
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
# Geometric brownian motion delta 1 ####
S0 =
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# Geometric brownian motion delta 1 ####
S0 = 1
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
# Geometric brownian motion delta 1 ####
S0 = 5
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
diff(log(S1/S0))
quantile(-diff(log(S1/S0)), probs = 0.95)
quantile(diff(log(S1/S0)), probs = 0.95)
quantile(-diff(log(S1/S0)), probs = 0.95)
quantile(-diff(log(S1/S0)), probs = 0.99)
quantile(-diff(log(S1/S0)), probs = 0.95)
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 5
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 50
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 1
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
sum(allocation)
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 44.7
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
N = 10000
S0 = 44.7
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
N = 10000
S0 = 44.7
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
N = 10000
S0 = 44.7
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
N = 10000
S0 = 44.7
S1 = vector('numeric')
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
# Value at Risk (VaR) at the 95% confidence level is 0.04 (or 4%),
# this means that there is a 95% chance that the potential loss will not exceed 4% of the portfolio's value
# over the specified time period. However, there is still a 5% chance that the loss could be greater than 4%.
hist(-diff(log(S1/S0)))
0.04 * 50000000
0.04 * 50
head(mat_daily_log_returns)
weights = allocation / sum(allocation)
mat_daily_log_returns
mat_daily_log_returns %*% weights
quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99))
hist(-(mat_daily_log_returns %*% weights))
hist(-(mat_daily_log_returns %*% weights), breaks = 20)
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
plot(exp(cumsum(mat_daily_log_returns %*% weights)), type = 'l')
quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99))
as.numeric(quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99)))
as.numeric(quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99))) * 250
quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99))
VaR_port = quantile(-(mat_daily_log_returns %*% weights), probs = c(0.95, 0.99))
as.numeric(VaR_port) * sqrt(250)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)
library(lubridate)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)
library(lubridate)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)
library(lubridate)
max_sharpe_portfolio_meta = read.csv('max_sharpe_portfolio_stats/portfolio_max_sharpe_v7.csv')
max_sharpe_portfolio_meta = tibble(max_sharpe_portfolio_meta)
head(max_sharpe_portfolio_meta)
all_parent_dir = 'all_cleaned_prices_for_meta'
path_to_all = paste0(getwd(), '/', all_parent_dir)
all_security_csv = list.files(path_to_all)
target_port_csv = 'portfolio_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
head(port_meta)
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
# number of securities in current portfolio
n_stocks = length(target_portfolio$Ticker)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path, sep = ',') %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%Y-%m-%d")
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2022-01-01'), ymd('2025-04-01'), by='day'))
head(daily_log_returns)
for(ticker in target_portfolio$Ticker) {
f_name = paste0(ticker, '.', 'csv' )
# get log returns for security
log_ret = price_to_log_returns(all_parent_dir, f_name)
# join the security's log returns along Date column
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
# remove NA to keep data uniform
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
dim(daily_log_returns)
min(daily_log_returns$Date)
target_port_csv = 'final_portfolio_stats/portfolio_final_weights_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
target_port_csv = 'portfolio_final_weights_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
head(port_meta)
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
# number of securities in current portfolio
n_stocks = length(target_portfolio$Ticker)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path, sep = ',') %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%Y-%m-%d")
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2022-01-01'), ymd('2025-04-01'), by='day'))
head(daily_log_returns)
for(ticker in target_portfolio$Ticker) {
f_name = paste0(ticker, '.', 'csv' )
# get log returns for security
log_ret = price_to_log_returns(all_parent_dir, f_name)
# join the security's log returns along Date column
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
# remove NA to keep data uniform
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
dim(daily_log_returns)
min(daily_log_returns$Date)
port_meta$Opt_Weights
target_port_csv = 'portfolio_final_weights_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
head(port_meta)
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
# number of securities in current portfolio
n_stocks = length(target_portfolio$Ticker)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path, sep = ',') %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%Y-%m-%d")
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2022-01-01'), ymd('2025-04-01'), by='day'))
original_mu = 0.022159672
original_sigma = 0.172406086
original_sharpe = -0.016467388
N = 1000
delta_t = 1/N
# Geometric brownian motion full path ####
S0 = 1
S1 = vector('numeric')
S1[1] = S0
for (i in 2:N) {
S1[i] = S1[i-1] * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
plot(S1, type = 'l')
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
# Geometric brownian motion delta 1 ####
# yearly t = 1
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
# yearly t = 1
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
# yearly t = 1
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (original_mu - 0.5 * original_sigma^2) * delta_t + sqrt(delta_t) * original_sigma * rnorm(1) )
}
# plot(S1, type = 'l')
quantile(-diff(log(S1/S0)), probs = 0.95)
all_parent_dir = 'all_cleaned_prices_for_meta'
path_to_all = paste0(getwd(), '/', all_parent_dir)
all_security_csv = list.files(path_to_all)
target_port_csv = 'portfolio_final_weights_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
head(port_meta)
port_meta$Opt_Weights
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
# number of securities in current portfolio
n_stocks = length(target_portfolio$Ticker)
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)
library(lubridate)
all_parent_dir = 'all_cleaned_prices_for_meta'
path_to_all = paste0(getwd(), '/', all_parent_dir)
all_security_csv = list.files(path_to_all)
target_port_csv = 'portfolio_final_weights_v7.csv'
port_meta = read.csv(paste0(getwd(), '/', 'portfolio_metas', '/', target_port_csv))
head(port_meta)
port_meta$Opt_Weights
# filter based on current security choices
target_portfolio = port_meta %>%
filter(Port == 1)
# number of securities in current portfolio
n_stocks = length(target_portfolio$Ticker)
daily_log_returns = tibble(Date = seq(ymd('2022-01-01'), ymd('2025-04-01'), by='day'))
head(daily_log_returns)
for(ticker in target_portfolio$Ticker) {
f_name = paste0(ticker, '.', 'csv' )
# get log returns for security
log_ret = price_to_log_returns(all_parent_dir, f_name)
# join the security's log returns along Date column
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
# remove NA to keep data uniform
daily_log_returns = na.omit(daily_log_returns)
price_to_log_returns = function(parent_dir, file_name) {
rel_path = paste0(parent_dir, '/', file_name)
hist_price = read.csv(file = rel_path, sep = ',') %>%
select(1,2)
colnames(hist_price) = c('Date', 'Price')
hist_price$Date <- as.Date(hist_price$Date, format="%Y-%m-%d")
# get log returns
ticker = unlist(strsplit(file_name, split = '[.]'))[1]
hist_price = hist_price[order(hist_price$Date),]
log_ret = hist_price[-1,]
log_ret[,2] = diff(log(hist_price[,2]))
colnames(log_ret) = c('Date', ticker)
return(log_ret)
}
daily_log_returns = tibble(Date = seq(ymd('2022-01-01'), ymd('2025-04-01'), by='day'))
head(daily_log_returns)
for(ticker in target_portfolio$Ticker) {
f_name = paste0(ticker, '.', 'csv' )
# get log returns for security
log_ret = price_to_log_returns(all_parent_dir, f_name)
# join the security's log returns along Date column
daily_log_returns = left_join(daily_log_returns, log_ret, by='Date')
}
# remove NA to keep data uniform
daily_log_returns = na.omit(daily_log_returns)
head(daily_log_returns)
asset_log_returns = read.csv('asset_log_returns.csv')
asset_log_returns = read.csv('portfolio_asset_log_returns.csv')
asset_log_returns = tibble(asset_log_returns)
asset_log_returns$Date = ymd(asset_log_returns$Date)
head(asset_log_returns)
dim(asset_log_returns)
sharpe_ratio = function(stock_returns, weights, rfr) {
portfolio_return = mean(stock_returns %*% weights) * 250
portfolio_std = as.numeric((t(weights) %*% cov(stock_returns) %*% weights)^0.5) * sqrt(250)
print(paste0('mu: ', portfolio_return))
print(paste0('sigma: ',portfolio_std))
print(paste0('sharpe: ', (portfolio_return - rfr) / portfolio_std))
}
suggested_portfolio_meta = read.csv('final_portfolio_stats/portfolio_final_weights_v7.csv')
suggested_portfolio_meta = tibble(suggested_portfolio_meta)
suggested_portfolio_meta
suggested_portfolio_log_returns = as.matrix(asset_log_returns[-1]) %*% suggested_portfolio_meta$Opt_Weights
plot_suggested_port_log_returns = exp(cumsum(suggested_portfolio_log_returns))
plot(asset_log_returns$Date, plot_suggested_port_log_returns, type = 'l', ylim = c(0.7, 1.7))
plot(asset_log_returns$Date, plot_suggested_port_log_returns, type = 'l')
quantile(suggested_portfolio_log_returns, 0.95)
quantile(suggested_portfolio_log_returns, 0.95) * sqrt(250)
# Riskfree rate
RFR = log(1.0001) * 250
sharpe_ratio(suggested_portfolio_log_returns, suggested_portfolio_meta$Opt_Weights, RFR)
dim(suggested_portfolio_log_returns)
sharpe_ratio(as.matrix(asset_log_returns[-1]), suggested_portfolio_meta$Opt_Weights, RFR)
quantile(suggested_portfolio_log_returns, 0.95) * sqrt(250)
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (suggested_mu - 0.5 * suggested_sigma^2) * delta_t + sqrt(delta_t) * suggested_sigma * rnorm(1) )
}
suggested_mu = -0.0217787
suggested_sigma = 0.1098528
N = 10000
suggested_mu = -0.0217787
suggested_sigma = 0.1098528
suggested_mu = -0.0217787
suggested_sigma = 0.1098528
N = 10000
S0 = 44.7
S1 = vector('numeric')
delta_t = 1
for (i in 1:N) {
S1[i] = S0 * exp( (suggested_mu - 0.5 * suggested_sigma^2) * delta_t + sqrt(delta_t) * suggested_sigma * rnorm(1) )
}
quantile(-diff(log(S1/S0)), probs = 0.95)
